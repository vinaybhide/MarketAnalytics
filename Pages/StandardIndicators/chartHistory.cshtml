@page
@model MarketAnalytics.Pages.StandardIndicators.chartHistory
@{
    ViewData["Title"] = "History Chart";
    string chartTitleCandle = "Candle chart";
    string chartUnit = "Daily Price";

}
<!--Load the AJAX API-->
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load('current', { 'packages': ['line', 'corechart', 'controls', 'annotationchart'] });
    google.charts.setOnLoadCallback(drawCandleChart);

    function drawCandleChart() {
        var allHistory = true;
        var data = google.visualization.arrayToDataTable([
            ['Date', 'Low', 'Open', 'Close', 'High', 'BuySell'],
    @foreach (var item in Model.listHistory)
    {
        //if ((Model.BuyDate != DateTime.MinValue) && (item.PriceDate.Date.CompareTo(Model.BuyDate) == 0))
        if (Model.listBuyDates.Exists(a => a.Date.Equals(item.PriceDate.Date)))
        {
            <text>[new Date('@item.PriceDate.ToShortDateString()'), @item.Low, @item.Open, @item.Close, @item.High, 'BUY'], </text>
        }
        //else if ((Model.SellDate != DateTime.MinValue) && (item.PriceDate.Date.CompareTo(Model.SellDate) == 0))
        else if (Model.listSellDates.Exists(a => a.Date.Equals(item.PriceDate.Date)))
        {
            <text>[new Date('@item.PriceDate.ToShortDateString()'), @item.Low, @item.Open, @item.Close, @item.High, 'SELL'], </text>
        }
        else
        {
            <text>[new Date('@item.PriceDate.ToShortDateString()'), @item.Low, @item.Open, @item.Close, @item.High, null], </text>
        }
    }
                                                                                                ]);

        var sellArray = data.getFilteredRows([{ column: 5, value: 'SELL' }]);
        var buyArray = data.getFilteredRows([{ column: 5, value: 'BUY' }]);
        let sellArrayLength = sellArray.length;
        let buyArrayLength = buyArray.length;

        data.setColumnProperty(5, 'role', 'tooltip');

        if ((sellArrayLength > 0) || (buyArrayLength > 0)) {
            drawBuySell(data);
            //var options = {
            //    //title: '@chartTitleCandle',
            //    curveType: 'function',
            //    pointsVisible: true,
            //    lineWidth: 3,
            //    legend: 'none',
            //    hAxis: {
            //        'title': 'Date',
            //        'format': 'd-MMM-y',
            //        'textStyle': {
            //            'fontSize': 10
            //        }
            //    },
            //    vAxis: {
            //        'title': '@chartUnit',
            //        'textStyle': {
            //            'fontSize': 10
            //        }
            //    },
            //    width: '100%',
            //    height: '100%',
            //    chartArea: { width: '85%', height: '75%' },
            //    seriesType: 'candlesticks',
            //    candlestick: {
            //        fallingColor: { strokeWidth: 0, fill: '#a52714' }, // red
            //        risingColor: { strokeWidth: 0, fill: '#0f9d58' },   // green
            //        view: { columns: [0, 4] }
            //    },
            //    tooltip: {
            //        textStyle: {
            //            fontSize: 30,
            //            color: 'red'
            //        }
            //    }

            //};
            ////var chart = new google.visualization.ComboChart(document.getElementById('historychart_div'));

            //var chart = new google.visualization.CandlestickChart(document.getElementById('historychart_div'));

            ////var chart = new google.visualization.AnnotationChart(document.getElementById('historychart_div'));
            ////var chart = new google.visualization.ComboChart(document.getElementById('historychart_div'));

            //function selectHandler() {
            //    var selectedItem = chart.getSelection()[0];
            //    if (selectedItem) {
            //        var date = data.getValue(selectedItem.row, 0);
            //        var low = data.getValue(selectedItem.row, 1);
            //        var open = data.getValue(selectedItem.row, 2);
            //        var close = data.getValue(selectedItem.row, 3);
            //        var high = data.getValue(selectedItem.row, 4);
            //        alert("Date: " + date + "\n low: " + low + "\n open: " + open + "\n close: " + close + "\n high: " + high);
            //    }
            //}
            //google.visualization.events.addListener(chart, 'select', selectHandler);
            //chart.draw(data, options);
            //drawAdditionalHAxis(chart, data);  //render custom axis (line & label) for the last value
            //drawAdditionalVAxis(chart, data);  //render custom axis (line & label) for the last value
        }
        else {
            //data.removeColumn(5);
            drawDashboard(data, true);
        }
    }

    function drawAdditionalHAxis(chart, dataTable) {
        var layout = chart.getChartLayoutInterface();
        var chartArea = layout.getChartAreaBoundingBox();
        var svg = chart.getContainer().getElementsByTagName('svg')[0];
        //var lastVal = dataTable.getValue(dataTable.getNumberOfRows() - 1, 1);
        //var lastVal = dataTable.getValue(0, 3);
        var rowIndex = dataTable.getFilteredRows([{ column: 5, value: 'SELL' }]);
        let len = rowIndex.length;
        var lastVal;
        var yLoc;
        for (let i = 0; i < len; i++) {
            lastVal = dataTable.getValue(rowIndex[i], 3);
            yLoc = layout.getYLocation(lastVal);
            svg.appendChild(createLine(chartArea.left, yLoc, chartArea.width + chartArea.left, yLoc, '#cccccc', 2)); // axis line
            //svg.appendChild(createText(chartArea.left - 60, yLoc + 5, 'Arial', '13', 'Sell :' + lastVal)); // axis label
            svg.appendChild(createText(chartArea.width + 80, yLoc, 'Arial', '13', 'Sell :' + lastVal)); // axis label
        }

        rowIndex = dataTable.getFilteredRows([{ column: 5, value: 'BUY' }]);
        len = rowIndex.length;
        for (let i = 0; i < len; i++) {
            lastVal = dataTable.getValue(rowIndex[i], 1);
            yLoc = layout.getYLocation(lastVal);
            svg.appendChild(createLine(chartArea.left, yLoc, chartArea.width + chartArea.left, yLoc, '#cccccc', 2)); // axis line
            //svg.appendChild(createText(chartArea.left - 60, yLoc + 5, 'Arial', '13', 'Buy :' + lastVal)); // axis label
            svg.appendChild(createText(chartArea.width + 80, yLoc, 'Arial', '13', 'Buy :' + lastVal)); // axis label
        }
    }

    function drawAdditionalVAxis(chart, dataTable) {
        var layout = chart.getChartLayoutInterface();
        var chartArea = layout.getChartAreaBoundingBox();

        var svg = chart.getContainer().getElementsByTagName('svg')[0];
        //var lastVal = dataTable.getValue(dataTable.getNumberOfRows() - 1, 1);
        //var lastVal = dataTable.getValue(0, 3);
        var dateVal;
        var xLoc;
        var buyVal;
        var yLoc
        var rowIndex = dataTable.getFilteredRows([{ column: 5, value: 'SELL' }]);
        let len = rowIndex.length;
        for (let i = 0; i < len; i++) {
            dateVal = dataTable.getValue(rowIndex[i], 0);
            xLoc = layout.getXLocation(dateVal);
            buyVal = dataTable.getValue(rowIndex[i], 3);
            yLoc = layout.getYLocation(buyVal);
            svg.appendChild(createLine(xLoc, chartArea.top, xLoc, chartArea.height, '#cccccc', 2)); // axis line
            //svg.appendChild(createText(xLoc, chartArea.height + 0, 'Arial', '13', lastVal)); // axis label
            svg.appendChild(createCircle(xLoc, yLoc)); // axis label
        }
        rowIndex = dataTable.getFilteredRows([{ column: 5, value: 'BUY' }]);
        len = rowIndex.length;
        for (let i = 0; i < len; i++) {
            lastVal = dataTable.getValue(rowIndex[i], 0);
            xLoc = layout.getXLocation(lastVal);
            buyVal = dataTable.getValue(rowIndex[i], 1);
            yLoc = layout.getYLocation(buyVal);
            svg.appendChild(createLine(xLoc, chartArea.top, xLoc, chartArea.height, '#cccccc', 2)); // vertical line
            //svg.appendChild(createLine(xLoc - 20, axisdata, xLoc + 20, axisdata, '#000000', 4)); // horizontal line
            svg.appendChild(createCircle(xLoc, yLoc)); // axis label
        }
    }

    function createLine(x1, y1, x2, y2, color, w) {
        var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', x1);
        line.setAttribute('y1', y1);
        line.setAttribute('x2', x2);
        line.setAttribute('y2', y2);
        line.setAttribute('stroke', color);
        line.setAttribute('stroke-width', w);
        line.setAttribute('opacity', '0.5');
        return line;
    }

    function createCircle(x1, y1) {
        var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttributeNS(null, 'cx', x1);
        circle.setAttributeNS(null, 'cy', y1);
        circle.setAttributeNS(null, 'r', 5);
        circle.setAttributeNS(null, 'fill', '#f72');
        circle.setAttributeNS(null, 'stroke', '#000000');
        circle.setAttributeNS(null, 'stroke-width', 2);
        circle.setAttributeNS(null, 'opacity', '0.5');
        return circle;
    }

    function createText(x, y, fontFamily, fontSize, value) {
        var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', x);
        text.setAttribute('y', y);
        text.setAttribute('font-family', fontFamily);
        text.setAttribute('font-weight', 'normal');
        text.setAttribute('font-size', fontSize);
        text.setAttribute('font-style', 'italic');
        //text.setAttribute('opacity', '0.5');
        text.innerHTML = value;
        return text;
    }
    
    let listenerHandler;
    function drawBuySell(dataTable){
        var dashboard = new google.visualization.Dashboard(document.getElementById('historychart_div'));

        var dateRangeSlider = new google.visualization.ControlWrapper({
            //'controlType': 'ChartRangeFilter',
            'controlType': 'DateRangeFilter',
            'containerId': 'filter_div',
            'options': {
                'filterColumnLabel': 'Date'
            }
            //,
            //view: { columns: [0, 3] }
        });
        var candleChart;
        candleChart = new google.visualization.ChartWrapper({
            'chartType': 'CandlestickChart',
            'containerId': 'dashboard_candle_chart_div',
            'options': {
                //title: '@chartTitleCandle',
                'curveType': 'function',
                'pointsVisible': true,
                'lineWidth': 3,
                'legend': 'none',
                'hAxis': {
                    'title': 'Date',
                    'format': 'd-MMM-y',
                    'textStyle': {
                        'fontSize': 10
                    }
                },
                'vAxis': {
                    'title': '@chartUnit',
                    'textStyle': {
                        'fontSize': 10
                    }
                },
                'width': '100%',
                'height': '100%',
                'chartArea': { width: '85%', height: '75%' },
                'seriesType': 'candlesticks',
                'candlestick': {
                    'fallingColor': { 'strokeWidth': 0, 'fill': '#a52714' }, // red
                    'risingColor': { 'strokeWidth': 0, 'fill': '#0f9d58' },   // green
                    'view': { 'columns': [0, 4] }
                },
                'tooltip': {
                    'textStyle': {
                        'fontSize': 10,
                        'color': 'red'
                    }
                }

            }
            //,
            //view: { columns: [0,3] }
        });
        //do drawing here
        dashboard.bind(dateRangeSlider, candleChart);
        //dashboard.bind(dateRangeSlider, candleChart);
        google.visualization.events.addListener(candleChart, 'ready', onReady);
        dashboard.draw(dataTable);

        //google.visualization.events.addListener(candleChart, 'ready', onReady);

        function onReady() {
            if(listenerHandler != null)
            {
                google.visualization.events.removeListener(listenerHandler);
            }
            listenerHandler = google.visualization.events.addListener(candleChart.getChart(), 'select', selectHandler);
            drawAdditionalHAxis(candleChart.getChart(), dataTable);  //render custom axis (line & label) for the last value
            drawAdditionalVAxis(candleChart.getChart(), dataTable);  //render custom axis (line & label) for the last value
        }

        function selectHandler() {
            var selectedItem = candleChart.getChart().getSelection()[0];
            if (selectedItem) {
                var date = candleChart.getDataTable().getValue(selectedItem.row, 0);
                var low = candleChart.getDataTable().getValue(selectedItem.row, 1);
                var open = candleChart.getDataTable().getValue(selectedItem.row, 2);
                var close = candleChart.getDataTable().getValue(selectedItem.row, 3);
                var high = candleChart.getDataTable().getValue(selectedItem.row, 4);
                alert("Date: " + date.toDateString() + "\n low: " + low + "\n open: " + open + "\n close: " + close + "\n high: " + high);
            }
        }
    }


    function drawDashboard(dataTable) {
        var dashboard = new google.visualization.Dashboard(document.getElementById('historychart_div'));

        var dateRangeSlider = new google.visualization.ControlWrapper({
            //'controlType': 'ChartRangeFilter',
            'controlType': 'DateRangeFilter',
            'containerId': 'filter_div',
            'options': {
                'filterColumnLabel': 'Date'
            }
            //,
            //view: { columns: [0, 3] }

        });
        var candleChart;

        candleChart = new google.visualization.ChartWrapper({
            'chartType': 'CandlestickChart',
            'containerId': 'dashboard_candle_chart_div',
            'options': {
                'pointsVisible': true,
                'lineWidth': 3,
                'legend': 'none',
                'hAxis': {
                    'title': 'Date',
                    'format': 'd-MMM-y',
                    'textStyle': {
                        'fontSize': 10
                    }
                },
                'vAxis': { 
                    'title': '@chartUnit',
                    'textStyle': {
                        'fontSize': 10
                    }
                },
                'width': '100%',
                'height': '100%',
                'chartArea': { 'width': '85%', 'height': '75%' },
                'seriesType': 'candlesticks',
                'view': { 'columns': [0, 4] },

                'candlestick': {
                    'fallingColor': { 'strokeWidth': 0, 'fill': '#a52714' }, // red
                    'risingColor': { 'strokeWidth': 0, 'fill': '#0f9d58' }   // green
                    //'chartArea': {'width': '85%', 'height': '75%' }
                },

                'tooltip': {
                    'textStyle': {
                        'fontSize': 30,
                        'color': 'red'
                    }
                }
            }
            //,
            //view: { columns: [0,3] }
        });

        var lineChart = new google.visualization.ChartWrapper({
            chartType: 'AnnotationChart',
            containerId: 'dashboard_line_chart_div',
            options: {
                annotations: {
                    displayAnnotations: true
                },
                view: { columns: [0, 3] }
            }
            //,
            //view: { columns: [0, 3] }
        });

        dashboard.bind(dateRangeSlider, [candleChart, lineChart]);
        //dashboard.bind(dateRangeSlider, candleChart);
        dashboard.draw(dataTable);
    }
</script>



<!--<form asp-page="./historyChart" method="get">
    <div class="form-actions no-color">
        <p>
            Reset dates:
            <input id="searchid" type="hidden" name="id" value="@Model.CurrentID" />
            <input id="fromDt" type="date" name="fromDate" value="@Model.FromDate" />
            <input id="toDt" type="date" name="toDate" value="@Model.FromDate" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </p>
    </div>
</form>-->
<!--<<div id="dashboard_div">
    <div id="filter_div"></div>
    <div id="dashboard_candle_chart_div"></div>
    <div id="dashboard_line_chart_div"></div>
</div>
div class="text-center">
    <h1 class="display-4">Candlestick Chart</h1>
    <div id="candle_chart" style="width: 800px; height: 600px"></div>
</div>

<div class="text-center">
    <h1 class="display-4">Line Chart</h1>
    <div id="line_chart" style="width: 800px; height: 600px"></div>
</div>
-->
@*<div class="text-center">*@
<h4>@Model.ChartContent - @Model.CompanyName (@Model.Symbol)</h4>
@*<div id="historychart_div" style="font-size:small;width: 1200px; height: 700px">*@
<div id="historychart_div" style="border: 1px solid #ccc">
    <div id="filter_div" style="padding-left: 2em; padding-bottom:0em; min-width: 250px"></div>
    <div id="dashboard_candle_chart_div" style="border: 1px solid #ccc;padding-left: 0em; min-width: 250px;height: 700px;"></div>
    <div id="dashboard_line_chart_div"></div>
</div>

@*<div class="container-fluid lead">
</div>*@